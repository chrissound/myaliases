CURRENT_BG='NONE'

SEGMENT_SEPARATOR=''

# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    echo -n " %{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%} "
  else
    echo -n "%{$bg%}%{$fg%} "
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && echo -n $3
}

# End the prompt, closing any open segments
prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    echo -n " %{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
  else
    echo -n "%{%k%}"
  fi
  echo -n "%{%f%}"
	echo -n "
$SEGMENT_SEPARATOR"
  CURRENT_BG=''
}

### Prompt components
# Each component will draw itself, and hide itself if no information needs to be shown

# Context: user@hostname (who am I and where am I)
prompt_context() {
  if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then
    if [[ "$USER" == "root" ]]; then
      prompt_segment red default "%(!.%{%F{black}%}.)$USER"
    else
      prompt_segment blue default "%(!.%{%F{black}%}.)$USER"
    fi
    if [[ "$HOST" == "blueberry" ]]; then
      prompt_segment 38 default "%(!.%{%F{black}%}.)%m"
    elif [[ "$HOST" == "pineapple" ]]; then
      prompt_segment 59 default "%(!.%{%F{black}%}.)%m"
    elif [[ "$HOST" == "XenonKiloCranberry" ]]; then
      prompt_segment 47 default "%(!.%{%F{black}%}.)%m"
    else
      prompt_segment 73 default "%(!.%{%F{black}%}.)%m"
    fi
  fi
}

# Git: branch/detached head, dirty status
#prompt_git() {
#  local ref dirty mode repo_path
#  repo_path=$(git rev-parse --git-dir 2>/dev/null)
#
#  if $(git rev-parse --is-inside-work-tree >/dev/null 2>&1); then
#    dirty=$(parse_git_dirty)
#    ref=$(git symbolic-ref HEAD 2> /dev/null) || ref="➦ $(git show-ref --head -s --abbrev |head -n1 2> /dev/null)"
#    if [[ -n $dirty ]]; then
#      prompt_segment yellow black
#    else
#      prompt_segment green black
#    fi
#
#    if [[ -e "${repo_path}/BISECT_LOG" ]]; then
#      mode=" <B>"
#    elif [[ -e "${repo_path}/MERGE_HEAD" ]]; then
#      mode=" >M<"
#    elif [[ -e "${repo_path}/rebase" || -e "${repo_path}/rebase-apply" || -e "${repo_path}/rebase-merge" || -e "${repo_path}/../.dotest" ]]; then
#      mode=" >R>"
#    fi
#
#    setopt promptsubst
#    autoload -Uz vcs_info
#
#    zstyle ':vcs_info:*' enable git
#    zstyle ':vcs_info:*' get-revision true
#    zstyle ':vcs_info:*' check-for-changes true
#    zstyle ':vcs_info:*' stagedstr '✚'
#    zstyle ':vcs_info:git:*' unstagedstr '●'
#    zstyle ':vcs_info:*' formats ' %u%c'
#    zstyle ':vcs_info:*' actionformats ' %u%c'
#    vcs_info
#    echo -n "${ref/refs\/heads\// }${vcs_info_msg_0_%% }${mode}"
#  fi
#}

# Dir: current working directory
prompt_dir() {
  cols=$(tput cols)
  terminalWidth=$((cols-20))
  alcPrompt=$(sodiumSierraStrawberry $PWD -l "$terminalWidth")
  prompt_segment 0 47 "$alcPrompt"
}

prompt_randomCol() {
  if [[ -z "${PROMPTRANDOMCOL1-}" ]]; then
    PROMPTRANDOMCOL1=$(($RANDOM % 256))
    PROMPTRANDOMCOL2=$(($RANDOM % 256))
    PROMPTRANDOMCOL3=$(($RANDOM % 256))
    PROMPTRANDOMCOL4=$(($RANDOM % 256))

    randsh=$(($RANDOM % 2))

    if [ "$randsh" = "0" ]; then
      PROMPTRANDOMSHAPE1="\ue0b0"
    else
      PROMPTRANDOMSHAPE1="\u25cf"
    fi
    randsh=$(($RANDOM % 2))

    if [ "$randsh" = "0" ]; then
      PROMPTRANDOMSHAPE2="\ue0b0"
    else
      PROMPTRANDOMSHAPE2="\u25cf"
    fi
  fi
  prompt_segment $PROMPTRANDOMCOL1 $PROMPTRANDOMCOL2 $PROMPTRANDOMSHAPE1
  prompt_segment $PROMPTRANDOMCOL3 $PROMPTRANDOMCOL4 $PROMPTRANDOMSHAPE2
}

# Status:
# - was there an error
# - am I root
# - are there background jobs?
prompt_status() {
  local symbols
  symbols=()
  [[ $RETVAL -ne 0 ]] && symbols+="%{%F{red}%}✘"
  [[ -n "$symbols" ]] && prompt_segment black default "$symbols"
}

## Main prompt
build_prompt() {
  RETVAL=$?
  prompt_status
  prompt_context
  prompt_randomCol
  prompt_dir
  #prompt_git
  prompt_end

  if [ -d "/tmp2" ] 
  then
    echo $PWD > /tmp2/lastPwd
    # echo $PWD >> /tmp2/lastPwdRolling
    sed -i "1i$PWD" /tmp2/lastPwdRolling
    head -100 /tmp2/lastPwdRolling > /tmp2/lastPwdRolling.tmp
    mv /tmp2/lastPwdRolling.tmp /tmp2/lastPwdRolling
  else
    echo $PWD > /tmp/lastPwd
  fi
}

PROMPT='%{%f%b%k%}$(build_prompt) '
